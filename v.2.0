// Motor A (Motor 1)
int motor1Pin1 = 27; // IN1
int motor1Pin2 = 26; // IN2
int enable1Pin = 14; // ENA

// Motor B (Motor 2)
int motor2Pin1 = 25; // IN3
int motor2Pin2 = 33; // IN4
int enable2Pin = 32; // ENB

// Ultrasonic sensor pins
int trigPin = 12;
int echoPin = 13;

// Buzzer pin
int buzzerPin = 15;

// Push button pin
int buttonPin = 4;

long duration;
int distance;
bool allowMovement = false;
unsigned long buttonPressTime = 0;
const unsigned long overrideDuration = 6000; // 1 minute in milliseconds

void setup() {
  // Motor A pins setup
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(enable1Pin, OUTPUT);

  // Motor B pins setup
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enable2Pin, OUTPUT);

  // Ultrasonic sensor pins setup
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Buzzer pin setup
  pinMode(buzzerPin, OUTPUT);

  // Push button pin setup
  pinMode(buttonPin, INPUT_PULLUP); // Using internal pull-up resistor

  // Enable motors by setting ENA and ENB to HIGH
  digitalWrite(enable1Pin, HIGH);  
  digitalWrite(enable2Pin, HIGH);

  Serial.begin(115200);
}

void loop() {
  // Measure distance from the ultrasonic sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2; // Calculate distance in cm
  
  // Print the distance in serial monitor
  Serial.println(distance);

  // Check if the push button is pressed
  if (digitalRead(buttonPin) == LOW) {
    allowMovement = true;
    buttonPressTime = millis(); // Record the time the button was pressed
  }

  // Check if override duration has expired
  if (allowMovement && (millis() - buttonPressTime > overrideDuration)) {
    allowMovement = false; // Reset override after 1 minute
  }

  if (distance <= 5 && !allowMovement) {
    // Stop motors if object is within 5 cm and no override
    stopMotors();

    // Sound the buzzer
    digitalWrite(buzzerPin, HIGH);
  } else {
    // Otherwise, move motors in reverse
    moveMotorsReverse();

    // Turn off the buzzer
    digitalWrite(buzzerPin, LOW);
  }

  delay(100); // Delay for stability
}

void moveMotorsReverse() {
  // Move Motor A in reverse
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);

  // Move Motor B in reverse
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void stopMotors() {
  // Stop Motor A
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);

  // Stop Motor B
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}
